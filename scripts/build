#!/bin/bash

#=================================================
# BUILD SCRIPT RESOURCES USAGE:
# Up to 1.5GB disk space and 4GB RAM. 
#=================================================

set -x

upstream_owner="CorentinTh"
upstream_repo="it-tools"
ynh_owner="Yunohost-Apps"
ynh_repo="it-tools_ynh"
build_node_version=20

#Fill with Github Personal Token to upload release after build (not required if build is part of a Github workflow) - https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens
gh_personal_token="" 

#=================================================
# DOWNLOAD AND EXTRACT SOURCE
#=================================================
last_upstream_version=$(curl --silent "https://api.github.com/repos/${upstream_owner}/${upstream_repo}/releases/latest" | grep -Po "(?<=\"tag_name\": \").*(?=\")")
build_folder="${upstream_repo}_${last_upstream_version}"
curl -LJ "https://api.github.com/repos/${upstream_owner}/${upstream_repo}/tarball/${last_upstream_version}" --output "${build_folder}.tar.gz"
mkdir "$build_folder"
tar --strip-components=1 -xvf "${build_folder}.tar.gz" -C "./${build_folder}/"

# Add path placeholder
sed -i "s/const baseUrl = process.env.BASE_URL ?? '/';/const baseUrl = '\/__YNH_SUBDIR_PATH__';/" "$build_folder/vite.config.ts"

#=================================================
# BUILD
#=================================================
ynh_archive_name="${build_folder}_ynh.zip"
pushd "$build_folder"
    # Call NVM if expected node version differs form current node version
    current_node_version=$(node -v | cut -c 2- | cut -c 1-${#build_node_version})
    if [ "$current_node_version" != "$build_node_version" ]; then
        if [ -f ~/.nvm/nvm.sh ]; then
            source ~/.nvm/nvm.sh install $build_node_version
        else
            echo "Current Node.js version ($current_node_version) not matching building requirement ($build_node_version). Please install expected Node.js version or Node Version Manager (nvm)"
        fi
    fi

    # Actual build instructions
    corepack enable
    pnpm i && pnpm build

    # Package
    mv "dist" "${ynh_repo}"
    zip -r $ynh_archive_name "${ynh_repo}"
    mv $ynh_archive_name "../${ynh_archive_name}"
popd

#=================================================
# CLEAN BUILD FOLDER
#=================================================
rm -r "${build_folder}"
rm "${build_folder}.tar.gz"

#=================================================
# UPLOAD RELEASE - LOCAL BUILD ONLY
#=================================================
if [[ $gh_personal_token ]]; then
    
    echo "Trying to upload the release to https://github.com/${ynh_owner}/${ynh_repo}/releases/ ..."

    sha256sumarchive=$(sha256sum "$ynh_archive_name" | cut -d' ' -f1)

    if [[ "$@" =~ "push_release" ]]
    then
        ## Make a draft release json with a markdown body
        release='"tag_name": "'$last_upstream_version'", "target_commitish": "master", "name": "'$last_upstream_version'", '
        body="IT-Tools prebuilt archive for it-tools_ynh\\n=========\\nPlease refer to main IT-Tools project for the change : https://github.com/$upstream_owner/$upstream_repo/releases\\n\\nSha256sum : $sha256sumarchive"
        body=\"$body\"
        body='"body": '$body', '
        release=$release$body
        release=$release'"draft": true, "prerelease": false'
        release='{'$release'}'
        url="https://api.github.com/repos/$ynh_owner/$ynh_repo/releases"
        succ=$(curl -H "Authorization: token $gh_personal_token" --data "$release" $url)

        ## In case of success, we upload a file
        upload_generic=$(echo "$succ" | grep upload_url)
        if [[ $? -eq 0 ]]; then
            echo "Release created."
        else
            echo "Error creating release!"
            return
        fi

        # $upload_generic is like:
        # "upload_url": "https://uploads.github.com/repos/:owner/:repo/releases/:ID/assets{?name,label}",
        upload_prefix=$(echo $upload_generic | cut -d "\"" -f4 | cut -d "{" -f1)
        upload_file="$upload_prefix?name=$ynh_archive_name"

        echo "Start uploading first file"
        i=0
        upload_ok=false
        while [ $i -le 4 ]; do
            i=$((i+1))
            # Download file
            set +e
            succ=$(curl -H "Authorization: token $gh_personal_token" \
                -H "Content-Type: $(file -b --mime-type $ynh_archive_name)" \
                -H "Accept: application/vnd.github.v3+json" \
                --data-binary @$ynh_archive_name $upload_file)
            res=$?
            set -e
            if [ $res -ne 0 ]; then
                echo "Curl upload failled"
                continue
            fi
            echo "Upload done, check result"

            set +eu
            download=$(echo "$succ" | egrep -o "browser_download_url.+?")
            res=$?
            if [ $res -ne 0 ] || [ -z "$download" ]; then
                set -eu
                echo "Result upload error"
                continue
            fi
            set -eu
            echo "$download" | cut -d: -f2,3 | cut -d\" -f2
            echo "Upload OK"
            upload_ok=true
            break
        done
        
        set +x  

        if ! $upload_ok; then
            echo "Upload completely failed, exit"
            exit 1
        fi
    fi

    exit 0

else
    set +x 
    echo "Build completed but not uploaded - missing Github Token"
    echo $(realpath $ynh_archive_name)
    if [[ $GITHUB_OUTPUT ]]; then echo "YHN_ARCHIVE=$(realpath $ynh_archive_name)" >> $GITHUB_OUTPUT; fi
fi
